// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Host {
    #[prost(string, tag = "1")]
    pub platform: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub platform_version: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    pub cpu: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint64, tag = "4")]
    pub mem_total: u64,
    #[prost(uint64, tag = "5")]
    pub disk_total: u64,
    #[prost(uint64, tag = "6")]
    pub swap_total: u64,
    #[prost(string, tag = "7")]
    pub arch: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub virtualization: ::prost::alloc::string::String,
    #[prost(uint64, tag = "9")]
    pub boot_time: u64,
    #[prost(string, tag = "10")]
    pub ip: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub country_code: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub version: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "13")]
    pub gpu: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct State {
    #[prost(double, tag = "1")]
    pub cpu: f64,
    #[prost(uint64, tag = "3")]
    pub mem_used: u64,
    #[prost(uint64, tag = "4")]
    pub swap_used: u64,
    #[prost(uint64, tag = "5")]
    pub disk_used: u64,
    #[prost(uint64, tag = "6")]
    pub net_in_transfer: u64,
    #[prost(uint64, tag = "7")]
    pub net_out_transfer: u64,
    #[prost(uint64, tag = "8")]
    pub net_in_speed: u64,
    #[prost(uint64, tag = "9")]
    pub net_out_speed: u64,
    #[prost(uint64, tag = "10")]
    pub uptime: u64,
    #[prost(double, tag = "11")]
    pub load1: f64,
    #[prost(double, tag = "12")]
    pub load5: f64,
    #[prost(double, tag = "13")]
    pub load15: f64,
    #[prost(uint64, tag = "14")]
    pub tcp_conn_count: u64,
    #[prost(uint64, tag = "15")]
    pub udp_conn_count: u64,
    #[prost(uint64, tag = "16")]
    pub process_count: u64,
    #[prost(message, repeated, tag = "17")]
    pub temperatures: ::prost::alloc::vec::Vec<StateSensorTemperature>,
    #[prost(double, tag = "18")]
    pub gpu: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StateSensorTemperature {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(double, tag = "2")]
    pub temperature: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Task {
    #[prost(uint64, tag = "1")]
    pub id: u64,
    #[prost(uint64, tag = "2")]
    pub r#type: u64,
    #[prost(string, tag = "3")]
    pub data: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskResult {
    #[prost(uint64, tag = "1")]
    pub id: u64,
    #[prost(uint64, tag = "2")]
    pub r#type: u64,
    #[prost(float, tag = "3")]
    pub delay: f32,
    #[prost(string, tag = "4")]
    pub data: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    pub successful: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Receipt {
    #[prost(bool, tag = "1")]
    pub proced: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IoStreamData {
    #[prost(bytes = "vec", tag = "1")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
/// Generated client implementations.
pub mod nezha_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    #[derive(Debug, Clone)]
    pub struct NezhaServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl NezhaServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> NezhaServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> NezhaServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + Send + Sync,
        {
            NezhaServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn report_system_state(
            &mut self,
            request: impl tonic::IntoRequest<super::State>,
        ) -> std::result::Result<tonic::Response<super::Receipt>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/proto.NezhaService/ReportSystemState");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proto.NezhaService", "ReportSystemState"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn report_system_info(
            &mut self,
            request: impl tonic::IntoRequest<super::Host>,
        ) -> std::result::Result<tonic::Response<super::Receipt>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/proto.NezhaService/ReportSystemInfo");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proto.NezhaService", "ReportSystemInfo"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn report_task(
            &mut self,
            request: impl tonic::IntoRequest<super::TaskResult>,
        ) -> std::result::Result<tonic::Response<super::Receipt>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/proto.NezhaService/ReportTask");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proto.NezhaService", "ReportTask"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn request_task(
            &mut self,
            request: impl tonic::IntoRequest<super::Host>,
        ) -> std::result::Result<tonic::Response<tonic::codec::Streaming<super::Task>>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/proto.NezhaService/RequestTask");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proto.NezhaService", "RequestTask"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn io_stream(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::IoStreamData>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::IoStreamData>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/proto.NezhaService/IOStream");
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("proto.NezhaService", "IOStream"));
            self.inner.streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod nezha_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with NezhaServiceServer.
    #[async_trait]
    pub trait NezhaService: Send + Sync + 'static {
        async fn report_system_state(
            &self,
            request: tonic::Request<super::State>,
        ) -> std::result::Result<tonic::Response<super::Receipt>, tonic::Status>;
        async fn report_system_info(
            &self,
            request: tonic::Request<super::Host>,
        ) -> std::result::Result<tonic::Response<super::Receipt>, tonic::Status>;
        async fn report_task(
            &self,
            request: tonic::Request<super::TaskResult>,
        ) -> std::result::Result<tonic::Response<super::Receipt>, tonic::Status>;
        /// Server streaming response type for the RequestTask method.
        type RequestTaskStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::Task, tonic::Status>,
            > + Send
            + 'static;
        async fn request_task(
            &self,
            request: tonic::Request<super::Host>,
        ) -> std::result::Result<tonic::Response<Self::RequestTaskStream>, tonic::Status>;
        /// Server streaming response type for the IOStream method.
        type IOStreamStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::IoStreamData, tonic::Status>,
            > + Send
            + 'static;
        async fn io_stream(
            &self,
            request: tonic::Request<tonic::Streaming<super::IoStreamData>>,
        ) -> std::result::Result<tonic::Response<Self::IOStreamStream>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct NezhaServiceServer<T: NezhaService> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T: NezhaService> NezhaServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for NezhaServiceServer<T>
    where
        T: NezhaService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/proto.NezhaService/ReportSystemState" => {
                    #[allow(non_camel_case_types)]
                    struct ReportSystemStateSvc<T: NezhaService>(pub Arc<T>);
                    impl<T: NezhaService> tonic::server::UnaryService<super::State> for ReportSystemStateSvc<T> {
                        type Response = super::Receipt;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(&mut self, request: tonic::Request<super::State>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NezhaService>::report_system_state(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReportSystemStateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proto.NezhaService/ReportSystemInfo" => {
                    #[allow(non_camel_case_types)]
                    struct ReportSystemInfoSvc<T: NezhaService>(pub Arc<T>);
                    impl<T: NezhaService> tonic::server::UnaryService<super::Host> for ReportSystemInfoSvc<T> {
                        type Response = super::Receipt;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(&mut self, request: tonic::Request<super::Host>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NezhaService>::report_system_info(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReportSystemInfoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proto.NezhaService/ReportTask" => {
                    #[allow(non_camel_case_types)]
                    struct ReportTaskSvc<T: NezhaService>(pub Arc<T>);
                    impl<T: NezhaService> tonic::server::UnaryService<super::TaskResult> for ReportTaskSvc<T> {
                        type Response = super::Receipt;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TaskResult>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NezhaService>::report_task(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReportTaskSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proto.NezhaService/RequestTask" => {
                    #[allow(non_camel_case_types)]
                    struct RequestTaskSvc<T: NezhaService>(pub Arc<T>);
                    impl<T: NezhaService> tonic::server::ServerStreamingService<super::Host> for RequestTaskSvc<T> {
                        type Response = super::Task;
                        type ResponseStream = T::RequestTaskStream;
                        type Future =
                            BoxFuture<tonic::Response<Self::ResponseStream>, tonic::Status>;
                        fn call(&mut self, request: tonic::Request<super::Host>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NezhaService>::request_task(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RequestTaskSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/proto.NezhaService/IOStream" => {
                    #[allow(non_camel_case_types)]
                    struct IOStreamSvc<T: NezhaService>(pub Arc<T>);
                    impl<T: NezhaService> tonic::server::StreamingService<super::IoStreamData> for IOStreamSvc<T> {
                        type Response = super::IoStreamData;
                        type ResponseStream = T::IOStreamStream;
                        type Future =
                            BoxFuture<tonic::Response<Self::ResponseStream>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<tonic::Streaming<super::IoStreamData>>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NezhaService>::io_stream(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = IOStreamSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    Ok(http::Response::builder()
                        .status(200)
                        .header("grpc-status", tonic::Code::Unimplemented as i32)
                        .header(
                            http::header::CONTENT_TYPE,
                            tonic::metadata::GRPC_CONTENT_TYPE,
                        )
                        .body(empty_body())
                        .unwrap())
                }),
            }
        }
    }
    impl<T: NezhaService> Clone for NezhaServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: NezhaService> tonic::server::NamedService for NezhaServiceServer<T> {
        const NAME: &'static str = "proto.NezhaService";
    }
}
